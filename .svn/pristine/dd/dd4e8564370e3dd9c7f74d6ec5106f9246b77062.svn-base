using DLLFuniture;
using Libs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;

public partial class Cms_Control_wucContents : System.Web.UI.UserControl
{
    private enum HandleValue
    {
        Add,
        Edit,
        Nothing
    }

    private HandleValue Handle
    {
        get
        {
            object obj = ViewState["Handle"];
            return ((obj == null) ? HandleValue.Nothing : (HandleValue)ViewState["Handle"]);
        }
        set { ViewState["Handle"] = value; }
    }

    public string  ID
    {
        get
        {
            object obj = ViewState["ID"];
            return ((obj == null) ? "-1" : Convert.ToString(ViewState["ID"]));
        }
        set { ViewState["ID"] = value; }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            IniInsert();
            this.BindingData();
        }
    }
    private void IniInsert()
    {
        txtTitle.Text = string.Empty;
        radContents.Content = string.Empty;      
        Handle = HandleValue.Add;
        lblHandle.Text = "Thêm mới loại sản phẩm";
        lblmessage.Text = string.Empty;
    }
    private void Insert()
    {
        try
        {
            Data objdata = new Data(Global.ConnectionSql);
            ct obj = new ct();
            obj.DataObject = objdata;           
            obj.Title = txtTitle.Text.Trim();
            obj.ID = Global.FilterFileName(txtTitle.Text.Trim());
            obj.Detail = radContents.Content;           
            int result = Convert.ToInt32(obj.Add());
            if (result > 0)
            {
                this.BindingData();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "sucess", "messagesucess();", true);
            }
            else if (result == 0)
            {
                lblmessage.Text = "Dữ liệu bị trùng. Vui lòng kiểm tra lại !";
                mdPopup.Show();
                return;

            }
            else
            {
                lblmessage.Text = "Lỗi xảy ra. Vui lòng liên hệ người quản trị để khắc phục !";
                Global.WriteLogError("Insert() " + "");
                mdPopup.Show();
            }

        }
        catch (Exception ex)
        {
            Global.WriteLogError("Insert() " + ex);

        }
    }

    private ctCollection LoadData(string stextsearch)
    {
        ctCollection col = null;
        try
        {
            Data objdata = new Data(Global.ConnectionSql);
            ct obj = new ct();
            obj.DataObject = objdata;
            col = obj.Getlist(stextsearch);
        }
        catch (Exception ex)
        {
            Global.WriteLogError("LoadCategory()" + ex);
        }
        return col;
    }

    private void BindingData()
    {
        try
        {
            ctCollection col = null;
            col = this.LoadData(string.Empty);
            if (col == null)
            {
                col = new ctCollection();
                lblCount.Text = "Có 0" + " record";
                rptData.DataSource = col;
                rptData.DataBind();
            }
            else
            {
                lblCount.Text = "Có " + col.Count.ToString() + " record";
                lblCount.ForeColor = System.Drawing.Color.Blue;
                anpPager.RecordCount = col.Count;
                anpPager.PageSize = Convert.ToInt32(ddlPageSize.SelectedValue);
                anpPager.ShowFirstLast = false;
                col = this.GetSubData(col, anpPager.StartRecordIndex - 1, anpPager.EndRecordIndex);
                rptData.DataSource = col;
                rptData.DataBind();
            }

        }
        catch (Exception ex)
        {
            Global.WriteLogError("BindingData()" + ex);
        }
    }

    private ctCollection GetSubData(ctCollection Source, int start, int end)
    {
        int iTotalRecord = Source.Count;
        ctCollection subSource = new ctCollection();
        if (Source != null)
        {
            for (int i = start; i < end; i++)
            {
                subSource.Add(Source[i]);
            }
        }
        return subSource;
    }

    private void IniUpdate(string ID)
    {
        Data objdata = new Data(Global.ConnectionSql);
        ct obj = new ct();
        obj.DataObject = objdata;

        if (obj.GetByID(ID))
        {
            txtTitle.Text = obj.Title;
            radContents.Content = obj.Detail;
            Handle = HandleValue.Edit;
            lblHandle.Text = "Sửa nội dung";
            mdPopup.Show();
        }

    }

    private void Update(string id)
    {
        try
        {
            Data objdata = new Data(Global.ConnectionSql);

            ct obj = new ct();
            obj.DataObject = objdata;
            obj.ID = id;
            obj.Title = txtTitle.Text.Trim();
            obj.Detail = radContents.Content;
            int iResult = Convert.ToInt32(obj.Update());
            if (iResult > 0)
            {
                this.BindingData();
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "sucess", "messagesucess();", true);

            }
            else if (iResult == 0)
            {

                lblmessage.Text = "Trùng dữ liệu vui lòng kiểm tra lại";
                mdPopup.Show();
            }
            else
            {
                lblmessage.Text = "Lỗi xảy ra trong quá trình lưu dữ liệu. Liên hệ với người quản trị để khắc phục";
                mdPopup.Show();
            }

        }
        catch (Exception ex)
        {
            Global.WriteLogError("Update () " + ex);
            lblmessage.Text = "Lỗi xảy ra trong quá trình lưu dữ liệu. Liên hệ với người quản trị để khắc phục";
            mdPopup.Show();
        }
    }

    private bool Deleted(string  id)
    {
        bool ok = false;
        try
        {
            Data objdata = new Data(Global.ConnectionSql);
            ct obj = new ct();
            obj.DataObject = objdata;
            ok = obj.Delete(id);
        }
        catch (Exception ex)
        {
            Global.WriteLogError("Deleted() " + ex);

        }
        return ok;

    }

    protected void btnDeleted_Click(object sender, EventArgs e)
    {
        Deleted(ID);
        this.BindingData();
    }

    protected void ddlPageSize_SelectedIndexChanged(object sender, EventArgs e)
    {
        this.BindingData();
    }

    protected void anpPager_PageChanged(object sender, EventArgs e)
    {
        this.BindingData();
    }

    protected void rptData_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        try
        {
            //Lấy data
            ct obj = (ct)e.Item.DataItem;
            if (obj == null) { return; }
            //Set ID (unique id)

            HtmlInputCheckBox cbxSelect = e.Item.FindControl("cbxcheck") as HtmlInputCheckBox;
            if (cbxSelect != null)
            {
                ID = Convert.ToString(obj.ID);
                cbxSelect.Attributes.Add("uid", obj.ID.ToString());

            }
            //set image
           
        }
        catch (Exception ex)
        {
            Global.WriteLogError("rptData_ItemDataBound : " + ex);
        }
    }

    protected void rptData_ItemCommand(object sender, RepeaterCommandEventArgs e)
    {
        try
        {
            ID = Convert.ToString(e.CommandArgument);
            if (e.CommandName == "DoUpdate")
            {
                IniUpdate(ID);
            }
            if (e.CommandName == "DoDeteled")
            {
                mpdeleted.Show();
            }
         
        }
        catch (Exception ex)
        {
            Global.WriteLogError("rptData_ItemDataBound ()" + ex);
        }
    }

    protected void btnAdd_Click(object sender, EventArgs e)
    {
        IniInsert();
        mdPopup.Show();
    }

    protected void btnOk_Click(object sender, EventArgs e)
    {
        if (Handle == HandleValue.Add)
        {
            Insert();
        }
        if (Handle == HandleValue.Edit)
        {
            Update(ID);
        }
    }

}